class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

# Enter your code here. Read input from STDIN. Print output to STDOUT
'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 
           

       // this is a node of the tree , which contains info as data, left , right
'''
#written the code here too to import deque from collections
from collections import deque
def lca(root, v1, v2):
  #Enter your code here
    q = deque([root]); ref = {}; vone = None; vtwo = None
    ref[root] = root
    while q:
        node = q[0]
        if node.info == v1:
            vone = node
        if node.info == v2:
            vtwo = node
            
        if node.left:
            q.append(node.left)
            ref[node.left] = node
        if node.right:
            q.append(node.right)
            ref[node.right] = node
        
        q.popleft()
    #look for duplicates
    p1 = vone; p2 = vtwo;
    dup = [p1, p2]
    
    while True:
        p1 = ref[p1]; p2 = ref[p2]
        if p1 not in dup:
            dup.append(p1)
        else:
            dup.append(p1)
            break
        
        if p2 not in dup:
            dup.append(p2)
        else:
            dup.append(p2)
            break
    return dup.pop() if dup else root

tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

v = list(map(int, input().split()))

ans = lca(tree.root, v[0], v[1])
print (ans.info)
